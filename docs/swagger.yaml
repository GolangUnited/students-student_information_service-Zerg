definitions:
  models.Cert:
    properties:
      cert_id:
        type: string
      issued:
        type: string
      student_id:
        type: integer
    type: object
  models.Diploma:
    properties:
      description:
        type: string
      student_id:
        type: integer
      theme:
        type: string
    type: object
  models.Group:
    properties:
      date_end:
        type: string
      date_start:
        type: string
      group_id:
        type: integer
      group_name:
        type: string
      mentor_id:
        type: integer
    type: object
  models.Homework:
    properties:
      deadline:
        type: string
      homework_id:
        type: integer
      homework_text:
        type: string
    type: object
  models.HomeworkGrade:
    properties:
      grade:
        type: integer
      homework_grade_id:
        type: integer
      homework_id:
        type: integer
      student_id:
        type: integer
    type: object
  models.Interview:
    properties:
      interview_date:
        type: string
      mark:
        type: integer
      mentor_id:
        type: integer
      notes:
        type: string
      student_id:
        type: integer
    type: object
  models.JWT:
    properties:
      access_token:
        type: string
    type: object
  models.Login:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.Mentor:
    properties:
      bitrhday:
        type: string
      contacts:
        properties:
          discord:
            type: string
          telegram:
            type: string
        type: object
      email:
        type: string
      first_name:
        type: string
      groups:
        items:
          $ref: '#/definitions/models.Group'
        type: array
      last_name:
        type: string
    type: object
  models.Student:
    properties:
      bitrhday:
        type: string
      contacts:
        properties:
          discord:
            type: string
          telegram:
            type: string
        type: object
      email:
        type: string
      first_name:
        type: string
      group_id:
        type: integer
      last_name:
        type: string
    type: object
  models.StudentData:
    properties:
      group_id:
        type: integer
      user_id:
        type: integer
    type: object
  models.User:
    properties:
      bitrhday:
        type: string
      contacts:
        properties:
          discord:
            type: string
          telegram:
            type: string
        type: object
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      user_id:
        type: integer
    type: object
  models.UserData:
    properties:
      bitrhday:
        type: string
      contacts:
        properties:
          discord:
            type: string
          telegram:
            type: string
        type: object
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
    type: object
  rest.ErrorMessage:
    properties:
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for management students database
  title: Zerg Team Student Information Service
  version: "0.1"
paths:
  /admins:
    get:
      consumes:
      - application/json
      description: Get list of all admins
      operationId: admins-list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserData'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Get admins list
      tags:
      - admins
    post:
      consumes:
      - application/json
      description: Create new group in database
      operationId: new-admin
      parameters:
      - description: ID of the user who will be granted admin rights
        in: query
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Add admin
      tags:
      - admins
  /admins/{admin_id}:
    delete:
      consumes:
      - application/json
      description: Remove admin from database by id
      operationId: remove-admin-by-id
      parameters:
      - description: Admin ID to delete
        in: path
        name: admin_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Remove admin by id
      tags:
      - admins
    get:
      consumes:
      - application/json
      description: Get admin from database by ID
      operationId: get-admin-by-id
      parameters:
      - description: New admin ID
        in: path
        name: admin_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Get admin by id
      tags:
      - admins
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: Get user from database
      operationId: sign-in
      parameters:
      - description: user to get
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.JWT'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      summary: Get user
      tags:
      - auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: Sign up new user
      operationId: sign-up
      parameters:
      - description: user data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      summary: Create user
      tags:
      - auth
  /certs:
    get:
      consumes:
      - application/json
      description: Get list of all certs
      operationId: certs-list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Cert'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Get certs list
      tags:
      - certs
    post:
      consumes:
      - application/json
      description: Create new cert in database
      operationId: create-cert
      parameters:
      - description: cert data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Cert'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Create cert
      tags:
      - certs
  /certs/{cert_id}:
    delete:
      consumes:
      - application/json
      description: Remove cert from database by id
      operationId: remove-cert-by-id
      parameters:
      - description: Cert ID to delete
        in: path
        name: cert_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Remove cert
      tags:
      - certs
    get:
      consumes:
      - application/json
      description: Get cert from database by ID
      operationId: get-cert-by-id
      parameters:
      - description: Cert ID to get
        in: path
        name: cert_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Cert'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Get cert by id
      tags:
      - certs
    put:
      consumes:
      - application/json
      description: Update cert data in database by id
      operationId: update-cert-by-id
      parameters:
      - description: Cert ID to update
        in: path
        name: cert_id
        required: true
        type: integer
      - description: cert data to update
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Cert'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Update cert
      tags:
      - certs
  /diplomas:
    get:
      consumes:
      - application/json
      description: Get list of all diplomas
      operationId: diplomas-list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Diploma'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Get diplomas list
      tags:
      - diplomas
    post:
      consumes:
      - application/json
      description: Create new diploma in database
      operationId: create-diploma
      parameters:
      - description: diploma data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Diploma'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Create diploma
      tags:
      - diplomas
  /diplomas/{diploma_id}:
    delete:
      consumes:
      - application/json
      description: Remove diploma from database by id
      operationId: remove-diploma-by-id
      parameters:
      - description: Diploma ID to delete
        in: path
        name: diploma_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Remove diploma
      tags:
      - diplomas
    get:
      consumes:
      - application/json
      description: Get diploma from database by ID
      operationId: get-diploma-by-id
      parameters:
      - description: Diploma ID to get
        in: path
        name: diploma_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Get diploma by id
      tags:
      - diplomas
    put:
      consumes:
      - application/json
      description: Update diploma data in database by id
      operationId: update-diploma-by-id
      parameters:
      - description: Diploma ID to update
        in: path
        name: diploma_id
        required: true
        type: integer
      - description: diploma data to update
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Diploma'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Update diploma
      tags:
      - diplomas
  /groups:
    get:
      consumes:
      - application/json
      description: Get list of all groups
      operationId: groups-list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Group'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Get groups list
      tags:
      - groups
    post:
      consumes:
      - application/json
      description: Create new group in database
      operationId: create-group
      parameters:
      - description: group data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Group'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Create group
      tags:
      - groups
  /groups/{group_id}:
    delete:
      consumes:
      - application/json
      description: Remove group from database by id
      operationId: remove-group-by-id
      parameters:
      - description: Group ID to delete
        in: path
        name: group_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Remove group
      tags:
      - groups
    get:
      consumes:
      - application/json
      description: Get group from database by ID
      operationId: get-group-by-id
      parameters:
      - description: Group ID to get
        in: path
        name: group_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Get group by id
      tags:
      - groups
    put:
      consumes:
      - application/json
      description: Update group data in database by id
      operationId: update-group-by-id
      parameters:
      - description: Group ID to update
        in: path
        name: group_id
        required: true
        type: integer
      - description: group data to update
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Group'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Update group
      tags:
      - groups
  /health:
    get:
      description: Get status of webserver
      responses:
        "200":
          description: OK
      summary: Application health check
      tags:
      - health
  /homeworks:
    get:
      consumes:
      - application/json
      description: Get list of all homeworks
      operationId: homeworks-list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Homework'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Get homeworks list
      tags:
      - homeworks
    post:
      consumes:
      - application/json
      description: Create new homework in database
      operationId: create-homework
      parameters:
      - description: homework data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Homework'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Create homework
      tags:
      - homeworks
  /homeworks/{homework_id}:
    delete:
      consumes:
      - application/json
      description: Remove homework from database by id
      operationId: remove-homework-by-id
      parameters:
      - description: Homework ID to delete
        in: path
        name: homework_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Remove homework
      tags:
      - homeworks
    get:
      consumes:
      - application/json
      description: Get homework from database by ID
      operationId: get-homework-by-id
      parameters:
      - description: Homework ID to get
        in: path
        name: homework_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Homework'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Get homework by id
      tags:
      - homeworks
    put:
      consumes:
      - application/json
      description: Update homework data in database by id
      operationId: update-homework-by-id
      parameters:
      - description: Homework ID to update
        in: path
        name: homework_id
        required: true
        type: integer
      - description: homework data to update
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Homework'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Update homework
      tags:
      - homeworks
  /interviews:
    get:
      consumes:
      - application/json
      description: Get list of all interviews
      operationId: interviews-list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Interview'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Get interviews list
      tags:
      - interviews
    post:
      consumes:
      - application/json
      description: Create new interview in database
      operationId: create-interview
      parameters:
      - description: interview data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Interview'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Create interview
      tags:
      - interviews
  /interviews/{interview_id}:
    delete:
      consumes:
      - application/json
      description: Remove interview from database by id
      operationId: remove-interview-by-id
      parameters:
      - description: Interview ID to delete
        in: path
        name: interview_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Remove interview
      tags:
      - interviews
    get:
      consumes:
      - application/json
      description: Get interview from database by ID
      operationId: get-interview-by-id
      parameters:
      - description: Interview ID to get
        in: path
        name: interview_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Interview'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Get interview by id
      tags:
      - interviews
    put:
      consumes:
      - application/json
      description: Update interview data in database by id
      operationId: update-interview-by-id
      parameters:
      - description: Interview ID to update
        in: path
        name: interview_id
        required: true
        type: integer
      - description: interview data to update
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Interview'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Update interview
      tags:
      - interviews
  /mentors:
    get:
      consumes:
      - application/json
      description: Get list of all mentors
      operationId: mentors-list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Mentor'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Get mentors list
      tags:
      - mentors
    post:
      consumes:
      - application/json
      description: Create new group in database
      operationId: new-mentor
      parameters:
      - description: ID of the user who will be granted mentor rights
        in: query
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Add mentor
      tags:
      - mentors
  /mentors/{mentor_id}:
    delete:
      consumes:
      - application/json
      description: Remove mentor from database by id
      operationId: remove-mentor-by-id
      parameters:
      - description: Mentor ID to delete
        in: path
        name: mentor_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Remove mentor by id
      tags:
      - mentors
    get:
      consumes:
      - application/json
      description: Get mentor from database by ID
      operationId: get-mentor-by-id
      parameters:
      - description: Mentor ID to get
        in: path
        name: mentor_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Mentor'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Get mentor by id
      tags:
      - mentors
  /students:
    get:
      consumes:
      - application/json
      description: Get list of all students
      operationId: students-list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Student'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Get students list
      tags:
      - students
    post:
      consumes:
      - application/json
      description: Create new student in database
      operationId: new-student
      parameters:
      - description: student data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.StudentData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Add student
      tags:
      - students
  /students/{student_id}:
    delete:
      consumes:
      - application/json
      description: Remove student from database by id
      operationId: remove-student-by-id
      parameters:
      - description: Student ID to delete
        in: path
        name: student_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Remove student by id
      tags:
      - students
    get:
      consumes:
      - application/json
      description: Get student from database by ID
      operationId: get-student-by-id
      parameters:
      - description: Student ID to get
        in: path
        name: student_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Student'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Get student by id
      tags:
      - students
  /students/{student_id}/certs:
    get:
      consumes:
      - application/json
      description: Get student's certs from database by student ID
      operationId: get-certs-by-student-id
      parameters:
      - description: Student ID
        in: path
        name: student_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Cert'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Get certs by student ID
      tags:
      - students
  /students/{student_id}/diploma:
    get:
      consumes:
      - application/json
      description: Get student's diploma from database by student ID
      operationId: get-diploma-by-student-id
      parameters:
      - description: Student ID
        in: path
        name: student_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Diploma'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Get diploma by student ID
      tags:
      - students
  /students/{student_id}/hw-grades:
    delete:
      consumes:
      - application/json
      description: Delete homework grade for particular student
      operationId: delete-hw-grade
      parameters:
      - description: Homework ID
        in: path
        name: homework_grade_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Delete homework grade
      tags:
      - homework grades
    get:
      consumes:
      - application/json
      description: Get student's homework grades from database by student ID
      operationId: get-hw-grades-by-student-id
      parameters:
      - description: Student ID
        in: path
        name: student_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.HomeworkGrade'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Get homework grades by student ID
      tags:
      - homework grades
    post:
      consumes:
      - application/json
      description: Create new homework grade for particular student
      operationId: new-hw-grade
      parameters:
      - description: homework mark
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.HomeworkGrade'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Create new homework grade
      tags:
      - homework grades
    put:
      consumes:
      - application/json
      description: Update homework grade for particular student
      operationId: update-hw-grade
      parameters:
      - description: homework mark
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.HomeworkGrade'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Update homework grade
      tags:
      - homework grades
  /students/{student_id}/interview:
    get:
      consumes:
      - application/json
      description: Get student's interview from database by student ID
      operationId: get-interview-by-student-id
      parameters:
      - description: Student ID
        in: path
        name: student_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Interview'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Get interview by student ID
      tags:
      - students
  /users:
    get:
      consumes:
      - application/json
      description: Get list of all users
      operationId: users-list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserData'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Get users list
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create new user in database
      operationId: new-user
      parameters:
      - description: user data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Create user
      tags:
      - users
  /users/{user_id}:
    delete:
      consumes:
      - application/json
      description: Remove user from database by id
      operationId: remove-user-by-id
      parameters:
      - description: User ID to delete
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Remove user by id
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user from database by ID
      operationId: get-user-by-id
      parameters:
      - description: User ID to get
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user data in database by id
      operationId: update-user-by-id
      parameters:
      - description: User ID to update
        in: path
        name: user_id
        required: true
        type: integer
      - description: user data to update
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
        default:
          description: ""
          schema:
            $ref: '#/definitions/rest.ErrorMessage'
      security:
      - ApiToken: []
      summary: Update user by id
      tags:
      - users
securityDefinitions:
  ApiToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
